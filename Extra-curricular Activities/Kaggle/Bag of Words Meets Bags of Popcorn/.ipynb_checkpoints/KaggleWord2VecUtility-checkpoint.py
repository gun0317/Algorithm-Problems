{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import re\n",
    "import nltk\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "from bs4 import BeautifulSoup\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.stem.snowball import SnowballStemmer\n",
    "\n",
    "from multiprocessing import Pool\n",
    "\n",
    "class KaggleWord2VecUtility(object):\n",
    "\n",
    "    @staticmethod\n",
    "    def review_to_wordlist(review, remove_stopwords=False):\n",
    "        # 1. HTML 제거\n",
    "        review_text = BeautifulSoup(review, \"html.parser\").get_text()\n",
    "        # 2. 특수문자를 공백으로 바꿔줌\n",
    "        review_text = re.sub('[^a-zA-Z]', ' ', review_text)\n",
    "        # 3. 소문자로 변환 후 나눈다.\n",
    "        words = review_text.lower().split()\n",
    "        # 4. 불용어 제거\n",
    "        if remove_stopwords:\n",
    "            stops = set(stopwords.words('english'))\n",
    "            words = [w for w in words if not w in stops]\n",
    "        # 5. 어간추출\n",
    "        stemmer = SnowballStemmer('english')\n",
    "        words = [stemmer.stem(w) for w in words]\n",
    "        # 6. 리스트 형태로 반환\n",
    "        return(words)\n",
    "\n",
    "    @staticmethod\n",
    "    def review_to_join_words( review, remove_stopwords=False ):\n",
    "        words = KaggleWord2VecUtility.review_to_wordlist(\\\n",
    "            review, remove_stopwords=False)\n",
    "        join_words = ' '.join(words)\n",
    "        return join_words\n",
    "\n",
    "    @staticmethod\n",
    "    def review_to_sentences( review, remove_stopwords=False ):\n",
    "        # punkt tokenizer를 로드한다.\n",
    "        \"\"\"\n",
    "        이 때, pickle을 사용하는데\n",
    "        pickle을 통해 값을 저장하면 원래 변수에 연결 된 참조값 역시 저장된다.\n",
    "        저장된 pickle을 다시 읽으면 변수에 연결되었던\n",
    "        모든 레퍼런스가 계속 참조 상태를 유지한다.\n",
    "        \"\"\"\n",
    "        tokenizer = nltk.data.load('tokenizers/punkt/english.pickle')\n",
    "        # 1. nltk tokenizer를 사용해서 단어로 토큰화 하고 공백 등을 제거한다.\n",
    "        raw_sentences = tokenizer.tokenize(review.strip())\n",
    "        # 2. 각 문장을 순회한다.\n",
    "        sentences = []\n",
    "        for raw_sentence in raw_sentences:\n",
    "            # 비어있다면 skip\n",
    "            if len(raw_sentence) > 0:\n",
    "                # 태그제거, 알파벳문자가 아닌 것은 공백으로 치환, 불용어제거\n",
    "                sentences.append(\\\n",
    "                    KaggleWord2VecUtility.review_to_wordlist(\\\n",
    "                    raw_sentence, remove_stopwords))\n",
    "        return sentences\n",
    "\n",
    "\n",
    "    # 참고 : https://gist.github.com/yong27/7869662\n",
    "    # http://www.racketracer.com/2016/07/06/pandas-in-parallel/\n",
    "    # 속도 개선을 위해 멀티 스레드로 작업하도록\n",
    "    @staticmethod\n",
    "    def _apply_df(args):\n",
    "        df, func, kwargs = args\n",
    "        return df.apply(func, **kwargs)\n",
    "\n",
    "    @staticmethod\n",
    "    def apply_by_multiprocessing(df, func, **kwargs):\n",
    "        # 키워드 항목 중 workers 파라메터를 꺼냄\n",
    "        workers = kwargs.pop('workers')\n",
    "        # 위에서 가져온 workers 수로 프로세스 풀을 정의\n",
    "        pool = Pool(processes=workers)\n",
    "        # 실행할 함수와 데이터프레임을 워커의 수 만큼 나눠 작업\n",
    "        result = pool.map(KaggleWord2VecUtility._apply_df, [(d, func, kwargs)\n",
    "                for d in np.array_split(df, workers)])\n",
    "        pool.close()\n",
    "        # 작업 결과를 합쳐서 반환\n",
    "        return pd.concat(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
